name: JavaEE CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: megacity_test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=jdbc:mysql://127.0.0.1:3306/megacity_test_db" >> $GITHUB_ENV
          echo "DATABASE_USER=root" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=1234" >> $GITHUB_ENV

      - name: Initialize MySQL database
        run: |
          mysql -h 127.0.0.1 -u root -p1234 megacity_test_db < src/test/resources/megacity_test_db.sql 2>&1 | tee mysql_init.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Failed to run megacity_test_db.sql. Check mysql_init.log for details:"
            cat mysql_init.log
            exit 1
          fi

      - name: Run specific test (CustomerServiceImplTest)
        run: mvn -Dtest=CustomerServiceImplTest test
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_USER: ${{ env.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ env.DATABASE_PASSWORD }}

      - name: Generate test reports
        run: |
          mvn surefire-report:report
          mkdir -p test-results
          cp target/site/surefire-report.html test-results/
          cp -r target/surefire-reports/* test-results/

      - name: Archive test results
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-results

  create-pr-to-staging:
    needs: test  # Only runs if the test job succeeds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create and merge PR to staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to create PR if it doesn't exist
          PR_URL=$(gh pr create --base staging --head dev --title "Promote dev to staging" --body "Automated PR: Promoting changes from dev to staging." --fill 2>&1) || echo "PR already exists or cannot be created"
          
          # Get PR number regardless of whether it was just created or already existed
          PR_NUMBER=$(gh pr list --base staging --head dev --json number --jq '.[0].number')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "PR #$PR_NUMBER exists, proceeding with merge"
            # Merge the PR
            gh pr merge $PR_NUMBER --merge --delete-branch=false
          else
            echo "No PR exists between dev and staging. Attempting direct merge."
            # Direct merge as fallback
            git checkout staging
            git merge origin/dev -m "Direct merge from dev to staging"
            git push origin staging
          fi

  build:
    needs: create-pr-to-staging  # Only runs if PR is created
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build the project
        run: mvn clean package -DskipTests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_USER: ${{ env.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ env.DATABASE_PASSWORD }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.war