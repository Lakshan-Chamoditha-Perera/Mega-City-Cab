name: Mega City Cab Service CI Pipeline

on:
  push:
    branches: [ dev, staging, prod ]
  pull_request:
    branches: [ dev, staging, prod ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run Tests
        run: mvn test

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mega-city-cab-service
          path: target/*.war

      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run SpotBugs
        run: |
          echo "Running SpotBugs static analysis..."
          mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.5:check
        continue-on-error: true

      - name: Run PMD
        run: |
          echo "Running PMD code analysis..."
          mvn pmd:pmd
        continue-on-error: true

  simulate-deploy:
    name: Simulate Deployment
    runs-on: ubuntu-latest
    needs: [build, code-quality]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: mega-city-cab-service
          path: deploy

      - name: Set up environment variables
        run: |
          if [ "$GITHUB_REF_NAME" = "dev" ]; then
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          elif [ "$GITHUB_REF_NAME" = "staging" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          elif [ "$GITHUB_REF_NAME" = "prod" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          fi

      - name: Simulate deployment
        run: |
          echo "Preparing to deploy Mega City Cab Service to $DEPLOY_ENV environment"
          echo "WAR file details:"
          ls -la deploy/
          echo "In a real deployment scenario, we would now deploy the WAR file to a $DEPLOY_ENV Tomcat/WildFly server"

      - name: Generate deployment report
        run: |
          mkdir -p deployment-report
          cat > deployment-report/report.md << EOF
          # Deployment Simulation Report
          
          - **Project**: Mega City Cab Service
          - **Version**: 1.0-SNAPSHOT
          - **Environment**: $DEPLOY_ENV
          - **Timestamp**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - **Artifacts**: Successfully generated WAR file
          
          ## Next Steps
          In a real deployment scenario, this WAR file would be deployed to a $DEPLOY_ENV environment server.
          EOF

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report-${{ env.DEPLOY_ENV }}
          path: deployment-report/